package pizzas.data;

import org.springframework.asm.Type;
import org.springframework.jdbc.core.JdbcOperations;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.PreparedStatementCreatorFactory;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.stereotype.Repository;
import pizzas.Ingredient;
import pizzas.Pizza;
import pizzas.PizzaOrder;

import java.sql.Types;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

@Repository
public class JdbcOrderRepository implements OrderRepository {

    private JdbcOperations jdbcOperations; // jdbcTemplate can be used too ??

    public JdbcOrderRepository(JdbcOperations jdbcOperations) {
        this.jdbcOperations = jdbcOperations;
    }
    @Override
    public PizzaOrder save(PizzaOrder order) {
        PreparedStatementCreatorFactory pscf = new PreparedStatementCreatorFactory(
                "insert into Pizza_Order "
                        + "(delivery_name, delivery_street, delivery_city, "
                        + "delivery_zip, cc_number, "
                        + "cc_expiration, cc_cvv, placed_at) "
                        + "values (?,?,?,?,?,?,?,?)",
                Types.VARCHAR, Types.VARCHAR, Types.VARCHAR,
                Types.VARCHAR, Types.VARCHAR, Types.VARCHAR,
                Types.VARCHAR, Types.TIMESTAMP
        );

        // generated id value is needed for savePizza()
        pscf.setReturnGeneratedKeys(true);

        // Set the order date as Now
        order.setPlacedAt(new Date());

        // Give the parameters to the prepared statement
        PreparedStatementCreator psc = pscf.newPreparedStatementCreator(
                Arrays.asList(
                        order.getDeliveryName(),
                        order.getDeliveryStreet(),
                        order.getDeliveryCity(),
                        order.getDeliveryZip(),
                        order.getCcNumber(),
                        order.getCcExpiration(),
                        order.getCcCVV(),
                        order.getPlacedAt()
                )
        );

        // Create a GeneratedKeyHolder to keep the generated value that will be returned
        GeneratedKeyHolder keyHolder = new GeneratedKeyHolder();

        // execute the query:
        jdbcOperations.update(psc, keyHolder);

        // get the returned value
        long orderId = keyHolder.getKey().longValue();

        // OrderId is automatically generated by database. Set id as generated id
        order.setId(orderId);

        // When order is saved, save the pizzas as well
        List<Pizza> pizzas = order.getPizzas();
        int i=0;

        for(Pizza pizza : pizzas) {
            // use orderId here
            savePizza(orderId, i++, pizza);
        }

        return order;
    }

    /**
     * Insert pizza into the database
     * @param orderId related order
     * @param orderKey pizza's number in the order list
     * @param pizza the pizza wanted to save
     * @return id of the saved pizza
     */
    private long savePizza(long orderId, int orderKey, Pizza pizza) {
        PreparedStatementCreatorFactory pscf = new PreparedStatementCreatorFactory(
                "insert into Pizza "
                        + "(name, created_at, pizza_order, pizza_order_key) "
                        + "values(?,?,?,?)",
                Types.VARCHAR, Types.TIMESTAMP, Type.LONG, Type.LONG
        );

        // pizza's id will be generated by the database, it is needed for saveIngredientRefs()
        pscf.setReturnGeneratedKeys(true);

        // give the parameters to prepared statement
        PreparedStatementCreator psc = pscf.newPreparedStatementCreator(
                Arrays.asList(
                        pizza.getName(),
                        pizza.getCreatedAt(),
                        orderId,
                        orderKey
                )
        );

        // to keep the generated pizza id
        GeneratedKeyHolder keyHolder = new GeneratedKeyHolder();

        // execute the query
        jdbcOperations.update(psc, keyHolder);

        // get the generated value:
        long pizzaId = keyHolder.getKey().longValue();

        // set the pizza id as generated id
        pizza.setId(pizzaId);

        // save the ingredientRefs of the pizza:
        saveIngredientRefs(pizzaId, pizza.getIngredients());
        return 0;
    }

    private void saveIngredientRefs(long pizzaId, List<Ingredient> ingredients) {
        int key = 0;
        for(Ingredient ingredient : ingredients) {
            jdbcOperations.update(
                    "insert into Ingredient_Ref (ingredient, pizza, pizza_key) "
                            + "values(?,?,?)",
                        ingredient.getId(), pizzaId ,key++);
        }
    }
}
